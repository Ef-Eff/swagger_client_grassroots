=begin
#ESR Orders API

#API to process orders

OpenAPI spec version: 1.0.0
Contact: tomas.hreha@elder-studios.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class UploadOrderOrder
    # unique id for this order, used to collect tracking data or to update address and other details in subsequent requests
    attr_accessor :order_id

    # specific order type from website
    attr_accessor :order_type

    # iteration sequence number for subscription based orders
    attr_accessor :order_iteration

    # a float value, a sum of item values before discount
    attr_accessor :item_value

    # postal charge for the order, paid by customer
    attr_accessor :postage_value

    # total what customer paid, inluding shipping and possible discounts
    attr_accessor :gross_value

    # the discount value
    attr_accessor :discount_value

    # a date in YYYY-MM-DD format, has to be date in future
    attr_accessor :delivery_date

    # customer title first middle and last name
    attr_accessor :customer_name

    # business name, possible field on parcel allocation, part of address data
    attr_accessor :business_name

    # first line of address
    attr_accessor :address_line_1

    # second line of address
    attr_accessor :address_line_2

    # town or city line of address
    attr_accessor :town

    # county part of address
    attr_accessor :county

    # poscode section of address
    attr_accessor :postcode

    # valid recipient email
    attr_accessor :email

    # contact telephone number
    attr_accessor :telephone

    # specific customer delivery instructions for delivery company
    attr_accessor :delivery_instructions

    # delivery method for this parcel, string is matched internally to desired delivery and courier combination
    attr_accessor :delivery_method

    attr_accessor :items


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'order_id' => :'order_id',
        :'order_type' => :'order_type',
        :'order_iteration' => :'order_iteration',
        :'item_value' => :'item_value',
        :'postage_value' => :'postage_value',
        :'gross_value' => :'gross_value',
        :'discount_value' => :'discount_value',
        :'delivery_date' => :'delivery_date',
        :'customer_name' => :'customer_name',
        :'business_name' => :'business_name',
        :'address_line_1' => :'address_line_1',
        :'address_line_2' => :'address_line_2',
        :'town' => :'town',
        :'county' => :'county',
        :'postcode' => :'postcode',
        :'email' => :'email',
        :'telephone' => :'telephone',
        :'delivery_instructions' => :'delivery_instructions',
        :'delivery_method' => :'delivery_method',
        :'items' => :'items'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'order_id' => :'String',
        :'order_type' => :'String',
        :'order_iteration' => :'Integer',
        :'item_value' => :'String',
        :'postage_value' => :'String',
        :'gross_value' => :'String',
        :'discount_value' => :'String',
        :'delivery_date' => :'Date',
        :'customer_name' => :'String',
        :'business_name' => :'String',
        :'address_line_1' => :'String',
        :'address_line_2' => :'String',
        :'town' => :'String',
        :'county' => :'String',
        :'postcode' => :'String',
        :'email' => :'String',
        :'telephone' => :'String',
        :'delivery_instructions' => :'String',
        :'delivery_method' => :'String',
        :'items' => :'UploadOrderOrderItems'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.has_key?(:'order_type')
        self.order_type = attributes[:'order_type']
      end

      if attributes.has_key?(:'order_iteration')
        self.order_iteration = attributes[:'order_iteration']
      end

      if attributes.has_key?(:'item_value')
        self.item_value = attributes[:'item_value']
      else
        self.item_value = "0.00"
      end

      if attributes.has_key?(:'postage_value')
        self.postage_value = attributes[:'postage_value']
      else
        self.postage_value = "0.00"
      end

      if attributes.has_key?(:'gross_value')
        self.gross_value = attributes[:'gross_value']
      else
        self.gross_value = "0.00"
      end

      if attributes.has_key?(:'discount_value')
        self.discount_value = attributes[:'discount_value']
      else
        self.discount_value = "0.00"
      end

      if attributes.has_key?(:'delivery_date')
        self.delivery_date = attributes[:'delivery_date']
      end

      if attributes.has_key?(:'customer_name')
        self.customer_name = attributes[:'customer_name']
      end

      if attributes.has_key?(:'business_name')
        self.business_name = attributes[:'business_name']
      end

      if attributes.has_key?(:'address_line_1')
        self.address_line_1 = attributes[:'address_line_1']
      end

      if attributes.has_key?(:'address_line_2')
        self.address_line_2 = attributes[:'address_line_2']
      end

      if attributes.has_key?(:'town')
        self.town = attributes[:'town']
      end

      if attributes.has_key?(:'county')
        self.county = attributes[:'county']
      end

      if attributes.has_key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'telephone')
        self.telephone = attributes[:'telephone']
      end

      if attributes.has_key?(:'delivery_instructions')
        self.delivery_instructions = attributes[:'delivery_instructions']
      end

      if attributes.has_key?(:'delivery_method')
        self.delivery_method = attributes[:'delivery_method']
      end

      if attributes.has_key?(:'items')
        self.items = attributes[:'items']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @order_id.nil?
        invalid_properties.push("invalid value for 'order_id', order_id cannot be nil.")
      end

      if !@item_value.nil? && @item_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        invalid_properties.push("invalid value for 'item_value', must conform to the pattern /^(\d{1,100}\.\d{2})$/.")
      end

      if !@postage_value.nil? && @postage_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        invalid_properties.push("invalid value for 'postage_value', must conform to the pattern /^(\d{1,100}\.\d{2})$/.")
      end

      if !@gross_value.nil? && @gross_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        invalid_properties.push("invalid value for 'gross_value', must conform to the pattern /^(\d{1,100}\.\d{2})$/.")
      end

      if !@discount_value.nil? && @discount_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        invalid_properties.push("invalid value for 'discount_value', must conform to the pattern /^(\d{1,100}\.\d{2})$/.")
      end

      if @delivery_date.nil?
        invalid_properties.push("invalid value for 'delivery_date', delivery_date cannot be nil.")
      end

      if @customer_name.nil?
        invalid_properties.push("invalid value for 'customer_name', customer_name cannot be nil.")
      end

      if @address_line_1.nil?
        invalid_properties.push("invalid value for 'address_line_1', address_line_1 cannot be nil.")
      end

      if @town.nil?
        invalid_properties.push("invalid value for 'town', town cannot be nil.")
      end

      if @postcode.nil?
        invalid_properties.push("invalid value for 'postcode', postcode cannot be nil.")
      end

      if @email.nil?
        invalid_properties.push("invalid value for 'email', email cannot be nil.")
      end

      if @telephone.nil?
        invalid_properties.push("invalid value for 'telephone', telephone cannot be nil.")
      end

      if @delivery_method.nil?
        invalid_properties.push("invalid value for 'delivery_method', delivery_method cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @order_id.nil?
      return false if !@item_value.nil? && @item_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
      return false if !@postage_value.nil? && @postage_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
      return false if !@gross_value.nil? && @gross_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
      return false if !@discount_value.nil? && @discount_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
      return false if @delivery_date.nil?
      return false if @customer_name.nil?
      return false if @address_line_1.nil?
      return false if @town.nil?
      return false if @postcode.nil?
      return false if @email.nil?
      return false if @telephone.nil?
      return false if @delivery_method.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] item_value Value to be assigned
    def item_value=(item_value)

      if !item_value.nil? && item_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        fail ArgumentError, "invalid value for 'item_value', must conform to the pattern /^(\d{1,100}\.\d{2})$/."
      end

      @item_value = item_value
    end

    # Custom attribute writer method with validation
    # @param [Object] postage_value Value to be assigned
    def postage_value=(postage_value)

      if !postage_value.nil? && postage_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        fail ArgumentError, "invalid value for 'postage_value', must conform to the pattern /^(\d{1,100}\.\d{2})$/."
      end

      @postage_value = postage_value
    end

    # Custom attribute writer method with validation
    # @param [Object] gross_value Value to be assigned
    def gross_value=(gross_value)

      if !gross_value.nil? && gross_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        fail ArgumentError, "invalid value for 'gross_value', must conform to the pattern /^(\d{1,100}\.\d{2})$/."
      end

      @gross_value = gross_value
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_value Value to be assigned
    def discount_value=(discount_value)

      if !discount_value.nil? && discount_value !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        fail ArgumentError, "invalid value for 'discount_value', must conform to the pattern /^(\d{1,100}\.\d{2})$/."
      end

      @discount_value = discount_value
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          order_id == o.order_id &&
          order_type == o.order_type &&
          order_iteration == o.order_iteration &&
          item_value == o.item_value &&
          postage_value == o.postage_value &&
          gross_value == o.gross_value &&
          discount_value == o.discount_value &&
          delivery_date == o.delivery_date &&
          customer_name == o.customer_name &&
          business_name == o.business_name &&
          address_line_1 == o.address_line_1 &&
          address_line_2 == o.address_line_2 &&
          town == o.town &&
          county == o.county &&
          postcode == o.postcode &&
          email == o.email &&
          telephone == o.telephone &&
          delivery_instructions == o.delivery_instructions &&
          delivery_method == o.delivery_method &&
          items == o.items
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [order_id, order_type, order_iteration, item_value, postage_value, gross_value, discount_value, delivery_date, customer_name, business_name, address_line_1, address_line_2, town, county, postcode, email, telephone, delivery_instructions, delivery_method, items].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
