=begin
#ESR Orders API

#API to process orders

OpenAPI spec version: 1.0.0
Contact: tomas.hreha@elder-studios.co.uk
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class UploadOrderOrderItemsItem
    # unique item id from source
    attr_accessor :id

    # id used for matching the products between the systems
    attr_accessor :sku

    # integer quantity value
    attr_accessor :qty

    # product name as sold on source
    attr_accessor :product_name

    # float value for single unit of the product represents the price per unit customer has paid
    attr_accessor :unit_price


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'sku' => :'sku',
        :'qty' => :'qty',
        :'product_name' => :'product_name',
        :'unit_price' => :'unit_price'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'sku' => :'String',
        :'qty' => :'Integer',
        :'product_name' => :'String',
        :'unit_price' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.has_key?(:'qty')
        self.qty = attributes[:'qty']
      end

      if attributes.has_key?(:'product_name')
        self.product_name = attributes[:'product_name']
      end

      if attributes.has_key?(:'unit_price')
        self.unit_price = attributes[:'unit_price']
      else
        self.unit_price = "0.00"
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @sku.nil?
        invalid_properties.push("invalid value for 'sku', sku cannot be nil.")
      end

      if @qty.nil?
        invalid_properties.push("invalid value for 'qty', qty cannot be nil.")
      end

      if @product_name.nil?
        invalid_properties.push("invalid value for 'product_name', product_name cannot be nil.")
      end

      if @unit_price.nil?
        invalid_properties.push("invalid value for 'unit_price', unit_price cannot be nil.")
      end

      if @unit_price !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        invalid_properties.push("invalid value for 'unit_price', must conform to the pattern /^(\d{1,100}\.\d{2})$/.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @sku.nil?
      return false if @qty.nil?
      return false if @product_name.nil?
      return false if @unit_price.nil?
      return false if @unit_price !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_price Value to be assigned
    def unit_price=(unit_price)
      if unit_price.nil?
        fail ArgumentError, "unit_price cannot be nil"
      end

      if unit_price !~ Regexp.new(/^(\d{1,100}\.\d{2})$/)
        fail ArgumentError, "invalid value for 'unit_price', must conform to the pattern /^(\d{1,100}\.\d{2})$/."
      end

      @unit_price = unit_price
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          sku == o.sku &&
          qty == o.qty &&
          product_name == o.product_name &&
          unit_price == o.unit_price
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, sku, qty, product_name, unit_price].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
